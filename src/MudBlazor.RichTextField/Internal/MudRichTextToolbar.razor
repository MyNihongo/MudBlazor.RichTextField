@inject IJSRuntime _jsRuntime

<MudToolBar Class="mud-toolbar-richtext">
	@if (TextField.HasBold)
	{
		<MudToggleIconButton Icon="@Icons.Material.Rounded.FormatBold"
		                     ToggledIcon="@Icons.Material.Rounded.FormatBold"
		                     ToggledColor="@Color.Primary"
		                     Toggled="IsBoldActive"
		                     ToggledChanged="@OnBoldChangedAsync"/>
	}

	@if (TextField.HasItalic)
	{
		<MudToggleIconButton Icon="@Icons.Material.Rounded.FormatItalic"
		                     ToggledIcon="@Icons.Material.Rounded.FormatItalic"
		                     ToggledColor="@Color.Primary"
		                     Toggled="IsItalicActive"
		                     ToggledChanged="@OnItalicChangedAsync"/>
	}
	
	@if (TextField.HasUnderline)
	{
		<MudToggleIconButton Icon="@Icons.Material.Rounded.FormatUnderlined"
		                     ToggledIcon="@Icons.Material.Rounded.FormatUnderlined"
		                     ToggledColor="@Color.Primary"
		                     Toggled="IsUnderlineActive"
		                     ToggledChanged="@OnUnderlineChangedAsync"/>
	}
</MudToolBar>

@code
{
	private async Task OnBoldChangedAsync(bool isActive)
	{
		IsBoldActive = await _jsRuntime.ApplyBoldFormattingAsync(TextField.Id, isActive)
			.ConfigureAwait(false);
	}

	private async Task OnItalicChangedAsync(bool isActive)
	{
		IsItalicActive = await _jsRuntime.ApplyItalicFormattingAsync(TextField.Id, isActive)
			.ConfigureAwait(false);
	}

	private async Task OnUnderlineChangedAsync(bool isActive)
	{
		IsUnderlineActive = await _jsRuntime.ApplyUnderlineFormattingAsync(TextField.Id, isActive)
			.ConfigureAwait(false);
	}
}
